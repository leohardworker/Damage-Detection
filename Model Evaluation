import os
import librosa
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load audio files and extract MFCC features
def load_and_extract_features(audio_directory):
    features = []
    labels = []
    for file in os.listdir(audio_directory):
        if file.endswith('.wav'):
            file_path = os.path.join(audio_directory, file)
            audio, sr = librosa.load(file_path, sr=None)
            mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)
            if mfccs.shape[1] == 44:  # For example, making all feature vectors the same length
                features.append(mfccs.T.flatten())  # Flatten the features
                label = int(file.split('_')[0])  # Extract label from file name
                labels.append(label)
    return np.array(features), np.array(labels)

# Load data and extract features
audio_directory = '/path/to/your/audio/files'
features, labels = load_and_extract_features(audio_directory)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

# Create and train a Random Forest classification model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on test data
predictions = model.predict(X_test)

# Model evaluation
accuracy = accuracy_score(y_test, predictions)
conf_matrix = confusion_matrix(y_test, predictions)
class_report = classification_report(y_test, predictions)

print("Accuracy: {:.2f}%".format(accuracy * 100))
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", class_report)
