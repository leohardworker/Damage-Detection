import numpy as np
import sqlite3
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Connect to the database
connection = sqlite3.connect("audio_database.db")
cursor = connection.cursor()

# Load audio data from the database
cursor.execute("SELECT FrequencyData FROM Audios")
data = cursor.fetchall()

# Process audio data
audio_data = []
for datum in data:
    frequency_data = np.frombuffer(datum[0], dtype=np.float32)
    audio_data.append(frequency_data)

# Scale the data
scaler = MinMaxScaler()
scaled_audio_data = scaler.fit_transform(audio_data)

# Perform PCA for dimensionality reduction
pca = PCA(n_components=0.95)  # Retain 95% of eigenvalues
reduced_audio_data = pca.fit_transform(scaled_audio_data)

# Number of components selected by PCA
print(f"Number of selected components: {pca.n_components_}")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(reduced_audio_data, scaled_audio_data, test_size=0.2, random_state=42)

# Create and train the Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model's performance (using Mean Squared Error, for example)
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")

# Generate new audio data
generated_audio_data = model.predict(reduced_audio_data)
scaled_generated_audio_data = scaler.inverse_transform(generated_audio_data)

# Save the generated audio data to the database
for generated_frequency_data in scaled_generated_audio_data:
    new_data = generated_frequency_data.tobytes()
    cursor.execute("INSERT INTO Audios (FrequencyData) VALUES (?)", (new_data,))

# Commit the changes
connection.commit()

# Close the database connection
connection.close()

